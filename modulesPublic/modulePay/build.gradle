def cfg = rootProject.ext

// 通过apply方式，可以动态的指定是application还是library
apply plugin: 'com.android.library'

android {
    compileSdkVersion cfg.android.compileSdkVersion
    buildToolsVersion cfg.android.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.android.minSdkVersion
        targetSdkVersion cfg.android.targetSdkVersion
        versionCode cfg.android.versionCode
        versionName cfg.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    // 功能组件库不需要把依赖库再传递
    // 因为某个业务组件会去依赖该功能组件，而业务组件又会去依赖基础组件。所以该功能组件不需要往上传递
    // implementation是不可传递的依赖。api是可传递的依赖，可将依赖库向上传递给其他组件，防止重复依赖
    implementation project(':modulesBase:libBase')

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}